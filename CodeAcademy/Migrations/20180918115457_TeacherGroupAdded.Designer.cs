// <auto-generated />
using System;
using CodeAcademy.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CodeAcademy.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20180918115457_TeacherGroupAdded")]
    partial class TeacherGroupAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CodeAcademy.Models.Certificate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("SerialNumber");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("CodeAcademy.Models.CourseCompletionStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("CourseCompletionStatuses");
                });

            modelBuilder.Entity("CodeAcademy.Models.Faculty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("HourCount");

                    b.Property<int>("ImageId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Faculties");
                });

            modelBuilder.Entity("CodeAcademy.Models.Gender", b =>
                {
                    b.Property<byte>("Id");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("CodeAcademy.Models.Group", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseCompletionStatusId");

                    b.Property<DateTime>("CreationDate");

                    b.Property<int>("FacultyId");

                    b.Property<int>("ImageId");

                    b.Property<bool>("IsAssembled");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("LessonHourId");

                    b.Property<DateTime>("LessonsEndDate");

                    b.Property<DateTime>("LessonsStartDate");

                    b.Property<string>("Name")
                        .HasMaxLength(20);

                    b.Property<int>("RoomId");

                    b.Property<string>("TeacherId");

                    b.HasKey("Id");

                    b.HasIndex("CourseCompletionStatusId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("ImageId");

                    b.HasIndex("LessonHourId");

                    b.HasIndex("RoomId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("CodeAcademy.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ImageType")
                        .IsRequired();

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Path")
                        .HasMaxLength(60);

                    b.HasKey("Id");

                    b.ToTable("Images");

                    b.HasDiscriminator<string>("ImageType").HasValue("Image");
                });

            modelBuilder.Entity("CodeAcademy.Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("CodeAcademy.Models.LessonHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("BeginHour");

                    b.Property<byte>("BeginMinute");

                    b.Property<DateTime>("CreationDate");

                    b.Property<byte>("EndHour");

                    b.Property<byte>("EndMinute");

                    b.Property<bool>("Friday");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("Monday");

                    b.Property<string>("Name")
                        .HasMaxLength(20);

                    b.Property<bool>("Saturday");

                    b.Property<bool>("Sunday");

                    b.Property<bool>("Thursday");

                    b.Property<bool>("Tuesday");

                    b.Property<bool>("Wednesday");

                    b.HasKey("Id");

                    b.ToTable("LessonHours");
                });

            modelBuilder.Entity("CodeAcademy.Models.Like", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("LikeDate");

                    b.Property<int>("PostId");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("CodeAcademy.Models.MenuItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ImageId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<int>("Order");

                    b.Property<string>("Url");

                    b.Property<bool>("Visibility");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("MenuItems");
                });

            modelBuilder.Entity("CodeAcademy.Models.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreationDate");

                    b.Property<int>("FacultyId");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<string>("PostType")
                        .IsRequired();

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Posts");

                    b.HasDiscriminator<string>("PostType").HasValue("Post");
                });

            modelBuilder.Entity("CodeAcademy.Models.RoleMenuItem", b =>
                {
                    b.Property<string>("RoleId");

                    b.Property<int>("MenuItemId");

                    b.HasKey("RoleId", "MenuItemId");

                    b.HasIndex("MenuItemId");

                    b.ToTable("RoleMenuItems");
                });

            modelBuilder.Entity("CodeAcademy.Models.Room", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Capacity");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("CodeAcademy.Models.SocialProfile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ImageId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<string>("Url");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.HasIndex("UserId");

                    b.ToTable("SocialProfiles");
                });

            modelBuilder.Entity("CodeAcademy.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FacultyId");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name")
                        .HasMaxLength(30);

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("CodeAcademy.Models.TagPost", b =>
                {
                    b.Property<int>("TagId");

                    b.Property<int>("PostId");

                    b.HasKey("TagId", "PostId");

                    b.HasIndex("PostId");

                    b.ToTable("TagPosts");
                });

            modelBuilder.Entity("CodeAcademy.Models.TeacherToGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AddingDate");

                    b.Property<int>("GroupId");

                    b.Property<string>("TeacherId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherToGroups");
                });

            modelBuilder.Entity("CodeAcademy.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatingDate");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<byte>("GenderId");

                    b.Property<int>("ImageId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsBlocked");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("LastLoginDate");

                    b.Property<DateTime>("LastUpdateDate");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("Name");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("Patronymic");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<string>("Surname");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<string>("UserType")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("UserType").HasValue("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CodeAcademy.Models.PostImage", b =>
                {
                    b.HasBaseType("CodeAcademy.Models.Image");

                    b.Property<int>("PostId");

                    b.HasIndex("PostId");

                    b.ToTable("PostImage");

                    b.HasDiscriminator().HasValue("PostImage");
                });

            modelBuilder.Entity("CodeAcademy.Models.ProfileImage", b =>
                {
                    b.HasBaseType("CodeAcademy.Models.Image");


                    b.ToTable("ProfileImage");

                    b.HasDiscriminator().HasValue("ProfileImage");
                });

            modelBuilder.Entity("CodeAcademy.Models.Article", b =>
                {
                    b.HasBaseType("CodeAcademy.Models.Post");

                    b.Property<string>("Description");

                    b.Property<string>("Header");

                    b.HasIndex("FacultyId");

                    b.ToTable("Article");

                    b.HasDiscriminator().HasValue("Article");
                });

            modelBuilder.Entity("CodeAcademy.Models.Book", b =>
                {
                    b.HasBaseType("CodeAcademy.Models.Post");

                    b.Property<string>("Author");

                    b.Property<string>("Description")
                        .HasColumnName("Book_Description");

                    b.Property<string>("FilePath");

                    b.Property<int>("ImageId");

                    b.Property<bool>("IsApproved");

                    b.Property<int>("LanguageId");

                    b.Property<string>("Name");

                    b.Property<short>("PageCount");

                    b.HasIndex("FacultyId")
                        .HasName("IX_Posts_FacultyId1");

                    b.HasIndex("ImageId");

                    b.HasIndex("LanguageId");

                    b.ToTable("Book");

                    b.HasDiscriminator().HasValue("Book");
                });

            modelBuilder.Entity("CodeAcademy.Models.Comment", b =>
                {
                    b.HasBaseType("CodeAcademy.Models.Post");

                    b.Property<string>("Description")
                        .HasColumnName("Comment_Description");

                    b.Property<int>("PostId");

                    b.HasIndex("FacultyId");

                    b.HasIndex("PostId");

                    b.ToTable("Comment");

                    b.HasDiscriminator().HasValue("Comment");
                });

            modelBuilder.Entity("CodeAcademy.Models.Link", b =>
                {
                    b.HasBaseType("CodeAcademy.Models.Post");

                    b.Property<string>("Description")
                        .HasColumnName("Link_Description")
                        .HasMaxLength(60);

                    b.Property<string>("Url");

                    b.HasIndex("FacultyId");

                    b.ToTable("Link");

                    b.HasDiscriminator().HasValue("Link");
                });

            modelBuilder.Entity("CodeAcademy.Models.Question", b =>
                {
                    b.HasBaseType("CodeAcademy.Models.Post");

                    b.Property<string>("Description")
                        .HasColumnName("Question_Description");

                    b.Property<bool>("HasApprovedAnswer");

                    b.HasIndex("FacultyId");

                    b.ToTable("Question");

                    b.HasDiscriminator().HasValue("Question");
                });

            modelBuilder.Entity("CodeAcademy.Models.Student", b =>
                {
                    b.HasBaseType("CodeAcademy.Models.User");

                    b.Property<int?>("CertificateId");

                    b.Property<int>("CourseCompletionStatusId");

                    b.Property<int>("GroupId");

                    b.HasIndex("CertificateId");

                    b.HasIndex("CourseCompletionStatusId");

                    b.HasIndex("GroupId");

                    b.ToTable("Student");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("CodeAcademy.Models.Teacher", b =>
                {
                    b.HasBaseType("CodeAcademy.Models.User");

                    b.Property<int>("FacultyId");

                    b.HasIndex("FacultyId");

                    b.ToTable("Teacher");

                    b.HasDiscriminator().HasValue("Teacher");
                });

            modelBuilder.Entity("CodeAcademy.Models.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole");

                    b.Property<bool>("IsDeleted");

                    b.ToTable("Role");

                    b.HasDiscriminator().HasValue("Role");
                });

            modelBuilder.Entity("CodeAcademy.Models.Certificate", b =>
                {
                    b.HasOne("CodeAcademy.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CodeAcademy.Models.Faculty", b =>
                {
                    b.HasOne("CodeAcademy.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CodeAcademy.Models.Group", b =>
                {
                    b.HasOne("CodeAcademy.Models.CourseCompletionStatus", "CourseCompletionStatus")
                        .WithMany()
                        .HasForeignKey("CourseCompletionStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CodeAcademy.Models.Faculty", "Faculty")
                        .WithMany("Groups")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CodeAcademy.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CodeAcademy.Models.LessonHour", "LessonHour")
                        .WithMany("Groups")
                        .HasForeignKey("LessonHourId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CodeAcademy.Models.Room", "Room")
                        .WithMany("Groups")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CodeAcademy.Models.Teacher", "Teacher")
                        .WithMany("Groups")
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("CodeAcademy.Models.Like", b =>
                {
                    b.HasOne("CodeAcademy.Models.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CodeAcademy.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CodeAcademy.Models.MenuItem", b =>
                {
                    b.HasOne("CodeAcademy.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CodeAcademy.Models.Post", b =>
                {
                    b.HasOne("CodeAcademy.Models.User", "User")
                        .WithMany("Posts")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CodeAcademy.Models.RoleMenuItem", b =>
                {
                    b.HasOne("CodeAcademy.Models.MenuItem", "MenuItem")
                        .WithMany("RoleMenuItems")
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CodeAcademy.Models.Role", "Role")
                        .WithMany("RoleMenuItems")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CodeAcademy.Models.SocialProfile", b =>
                {
                    b.HasOne("CodeAcademy.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CodeAcademy.Models.User", "User")
                        .WithMany("SocialProfiles")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("CodeAcademy.Models.Tag", b =>
                {
                    b.HasOne("CodeAcademy.Models.Faculty", "Faculty")
                        .WithMany("Tags")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CodeAcademy.Models.TagPost", b =>
                {
                    b.HasOne("CodeAcademy.Models.Post", "Post")
                        .WithMany("TagPosts")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CodeAcademy.Models.Tag", "Tag")
                        .WithMany("TagPosts")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CodeAcademy.Models.TeacherToGroup", b =>
                {
                    b.HasOne("CodeAcademy.Models.Group", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CodeAcademy.Models.Teacher", "Teacher")
                        .WithMany()
                        .HasForeignKey("TeacherId");
                });

            modelBuilder.Entity("CodeAcademy.Models.User", b =>
                {
                    b.HasOne("CodeAcademy.Models.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CodeAcademy.Models.ProfileImage", "ProfileImage")
                        .WithOne("User")
                        .HasForeignKey("CodeAcademy.Models.User", "ImageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CodeAcademy.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CodeAcademy.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CodeAcademy.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CodeAcademy.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CodeAcademy.Models.PostImage", b =>
                {
                    b.HasOne("CodeAcademy.Models.Post", "Post")
                        .WithMany("PostImages")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CodeAcademy.Models.Article", b =>
                {
                    b.HasOne("CodeAcademy.Models.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CodeAcademy.Models.Book", b =>
                {
                    b.HasOne("CodeAcademy.Models.Faculty", "Faculty")
                        .WithMany("Books")
                        .HasForeignKey("FacultyId")
                        .HasConstraintName("FK_Posts_Faculties_FacultyId1")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CodeAcademy.Models.Image", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CodeAcademy.Models.Language", "Language")
                        .WithMany("Books")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CodeAcademy.Models.Comment", b =>
                {
                    b.HasOne("CodeAcademy.Models.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CodeAcademy.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CodeAcademy.Models.Link", b =>
                {
                    b.HasOne("CodeAcademy.Models.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CodeAcademy.Models.Question", b =>
                {
                    b.HasOne("CodeAcademy.Models.Faculty", "Faculty")
                        .WithMany()
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CodeAcademy.Models.Student", b =>
                {
                    b.HasOne("CodeAcademy.Models.Certificate", "Certificate")
                        .WithMany()
                        .HasForeignKey("CertificateId");

                    b.HasOne("CodeAcademy.Models.CourseCompletionStatus", "CourseCompletionStatus")
                        .WithMany("Students")
                        .HasForeignKey("CourseCompletionStatusId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CodeAcademy.Models.Group", "Group")
                        .WithMany("Students")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("CodeAcademy.Models.Teacher", b =>
                {
                    b.HasOne("CodeAcademy.Models.Faculty", "Faculty")
                        .WithMany("Teachers")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
